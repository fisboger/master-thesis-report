--- "a/.\\unpatched tcpip.sys"
+++ "b/.\\patched tcpip.sys"
@@ -1,6 +1,4 @@
-mov     [rsp+arg_10], r8b
 mov     [rsp+arg_0], rcx
-push    rbx
 push    rbp
 push    rsi
 push    rdi
@@ -8,31 +6,49 @@ push    r12
 push    r13
 push    r14
 push    r15
-sub     rsp, 58h        ; Integer Subtraction
+sub     rsp, 60h        ; Integer Subtraction
 movzx   r9d, word ptr [rdx+88h] ; Move with Zero-Extend
 mov     rdi, rdx
 mov     edx, [rdx+8Ch]
-mov     bl, r8b
+mov     r13b, r8b
 add     edx, r9d        ; Add
-mov     byte ptr [rsp+98h+var_70], 0
-and     [rsp+98h+var_78], 0 ; Logical AND
 mov     [rsp+98h+length], edx
 lea     eax, [rdx+28h]  ; Load Effective Address
-mov     rdx, rdi
 mov     [rsp+98h+var_68], eax
 lea     eax, [r9+28h]   ; Load Effective Address
 mov     [rsp+98h+BytesNeeded], eax
-xor     r9d, r9d        ; Logical Exclusive OR
 mov     rax, [rcx+0D0h]
-lea     rcx, IppReassemblyNetBufferListsComplete ; Load Effective Address
-mov     r13, [rax+8]
-mov     rax, [r13+0]
+mov     r12, [rax+8]
+mov     rax, [r12]
 mov     r15, [rax+28h]
 mov     eax, gs:1A4h
 mov     r8d, eax
-mov     rax, [r13+388h]
+mov     rax, [r12+388h]
 lea     rbp, [r8+r8*2]  ; Load Effective Address
-mov     r12, [rax+r8*8]
-xor     r8d, r8d        ; Logical Exclusive OR
+mov     rcx, [rax+r8*8]
 shl     rbp, 6          ; Shift Logical Left
-add     rbp, [r15+4728h] ; Add
+add     rbp, [r15+4728h] ; Add
+mov     [rsp+98h+var_58], rcx
+cmp     edx, 0FFFFh     ; Compare Two Operands
+jbe     short loc_1C019A186 ; Jump if Below or Equal (CF=1 | ZF=1)
+test    byte ptr cs:WPP_MAIN_CB.Queue+1Ch, 40h ; Logical Compare
+jz      short loc_1C019A16F ; Jump if Zero (ZF=1)
+cmp     cs:dword_1C01FECA4, 1 ; Compare Two Operands
+jnz     short loc_1C019A16F ; Jump if Not Zero (ZF=0)
+mov     r9d, [r12+8]
+lea     r8, MICROSOFT_TCPIP_PROVIDER ; Load Effective Address
+lea     rdx, TCPIP_IP_REASSEMBLY_FAILURE_PKT_LEN ; Load Effective Address
+mov     [rsp+98h+var_78], 17h
+lea     rcx, MICROSOFT_TCPIP_PROVIDER_Context ; Load Effective Address
+call    McTemplateK0qq_EtwWriteTransfer ; Call Procedure
+lea     rcx, [r15+4F50h] ; Load Effective Address
+mov     r8b, r13b
+mov     rdx, rdi
+call    IppDeleteFromReassemblySet ; Call Procedure
+jmp     loc_1C019A587   ; Jump
+mov     byte ptr [rsp+98h+var_70], 0
+lea     rcx, IppReassemblyNetBufferListsComplete ; Load Effective Address
+and     [rsp+98h+var_78], 0 ; Logical AND
+xor     r9d, r9d        ; Logical Exclusive OR
+xor     r8d, r8d        ; Logical Exclusive OR
+mov     rdx, rdi    